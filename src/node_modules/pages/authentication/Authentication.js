import React, { useEffect, useState, useContext } from 'react';
import useFetch from 'hooks/useFetch';
import useLocalStorage from 'hooks/useLocalStorage';
import { NavLink, Redirect } from 'react-router-dom';
import {CurrentUserContext} from 'contexts/currentUser';
import BackendErrorMessages from './Components/BackendErrorMessages';

const Authentication = (props) => {

    const isLogin = props.location.pathname === '/login';

    const apiUrl = isLogin ? '/users/login' : '/users';

    const pageTitle = isLogin ? 'Sign in' : 'Sign up';
    const pageLink = isLogin ? '/register' : '/login';
    const pageDescription = isLogin ? 'Need an account?' : 'Have an account?';
    const buttonText = isLogin ? 'Sign In' : 'Sign Up';

    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [username, setUsername] = useState('');
    const [{ response, isLoading, error }, doFetch] = useFetch(apiUrl);
    const [token, setToken] = useLocalStorage('token');
    const [currentUserState, setCurrentUserState] = useContext(CurrentUserContext);

    console.log(currentUserState.isLoggedIn);

    const handlesubmit = (e) => {
        e.preventDefault();

        const user = isLogin ? {email, password} : {email, password, username}
        doFetch({
            method: 'post',
            data: {
                user
            }
        })
        setCurrentUserState({
            ...currentUserState,
            isLoading: true
        })
    }

    useEffect(() => {
        if (!response) {
            return
        }
        console.log(response);
        setToken(response.user.token);
        setCurrentUserState({
            ...currentUserState,
            isLoading: false,
            isLoggedIn: true,
            currentUser: response.user
        })
    },[response])

    if (currentUserState.isLoggedIn) {
        return(
            <Redirect to='/' />
        )
    }

    return (
        <div className='auth-page'>
            <div className='container page'>
                <div className='row'>
                    <div className='col-md-6 offset-md-3 col-xs-12'>
                        <h1 className='text-xs-center'>
                            {pageTitle}
                        </h1>
                        <p className='text-xs-center'>
                            <NavLink to={pageLink}>{pageDescription}</NavLink>
                        </p>
                        <form onSubmit={handlesubmit}>
                            <fieldset>
                                {error ? <BackendErrorMessages errors={error.errors} /> : <div></div>}
                                {!isLogin ?
                                    <fieldset className='form-group'>
                                        <input type='text' className='form-control form-control-lg' placeholder='Username' value={username} onChange={e => setUsername(e.target.value)} />
                                    </fieldset>
                                    :
                                    <div></div>}
                                <fieldset className='form-group'>
                                    <input type='email' className='form-control form-control-lg' placeholder='Email' value={email} onChange={e => setEmail(e.target.value)} />
                                </fieldset>
                                <fieldset className='form-group'>
                                    <input type='password' className='form-control form-control-lg' placeholder='Password' value={password} onChange={e => setPassword(e.target.value)} />
                                </fieldset>
                                <button className='btn btn-lg btn-primary pull-xs-right' type='submit' disabled={isLoading}>{buttonText}</button>
                            </fieldset>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default Authentication;